#!/usr/bin/env python3
"""
A battery indicator blocklet script for i3blocks,
improved to display different battery icons based on charge percentage.
FontAwesome battery icons used:
    (U+F244): empty
    (U+F243): quarter
    (U+F242): half
    (U+F241): three-quarters
    (U+F240): full
"""

import os
import re
from subprocess import check_output


def get_battery_icon(percent):
    """Return a FontAwesome battery icon based on the charge percentage."""
    if percent < 10:
        return "<span font='FontAwesome'>\uf244</span>"  # empty
    elif percent < 30:
        return "<span font='FontAwesome'>\uf243</span>"  # quarter
    elif percent < 50:
        return "<span font='FontAwesome'>\uf242</span>"  # half
    elif percent < 80:
        return "<span font='FontAwesome'>\uf241</span>"  # three-quarters
    else:
        return "<span font='FontAwesome'>\uf240</span>"  # full


def get_color(percent, config):
    """Return a color based on the current battery percentage using environment overrides."""
    if percent < 10:
        return config.get("color_10", "#FFFFFF")
    elif percent < 20:
        return config.get("color_20", "#FF3300")
    elif percent < 30:
        return config.get("color_30", "#FF6600")
    elif percent < 40:
        return config.get("color_40", "#FF9900")
    elif percent < 50:
        return config.get("color_50", "#FFCC00")
    elif percent < 60:
        return config.get("color_60", "#FFFF00")
    elif percent < 70:
        return config.get("color_70", "#FFFF33")
    elif percent < 80:
        return config.get("color_80", "#FFFF66")
    else:
        return config.get("color_full", "#FFFFFF")


def main():
    config = dict(os.environ)
    try:
        status = check_output(["acpi"], universal_newlines=True)
    except Exception:
        status = ""

    if not status.strip():
        # No battery found
        fallback_color = config.get("color_10", "red")
        fulltext = "<span color='{}'><span font='FontAwesome'>\uf00d \uf240</span></span>".format(
            fallback_color
        )
        percentleft = 100
    else:
        batteries = status.strip().split("\n")
        state_list = []
        percent_list = []
        timeleft = ""
        for battery in batteries:
            if battery:
                # Example acpi output:
                # "Battery 0: Discharging, 42%, 01:23 remaining"
                parts = battery.split(": ")
                if len(parts) < 2:
                    continue
                segments = parts[1].split(", ")
                state_list.append(segments[0])
                try:
                    p = int(segments[1].rstrip("%\n"))
                except ValueError:
                    p = 0
                percent_list.append(p)
                # Try to extract time (if available)
                if not timeleft:
                    match = re.search(r"(\d+):(\d+)", segments[-1])
                    if match:
                        time_formatted = ":".join(match.groups())
                        timeleft = " ({})".format(time_formatted)
        state = state_list[0] if state_list else "Unknown"
        percentleft = int(sum(percent_list) / len(percent_list)) if percent_list else 0

        # Predefined icons for charging and plugged states
        FA_LIGHTNING = (
            "<span color='{}'><span font='FontAwesome'>\uf0e7</span></span>".format(
                config.get("color_charging", "yellow")
            )
        )
        FA_PLUG = "<span font='FontAwesome'>\uf1e6</span>"
        FA_QUESTION = "<span font='FontAwesome'>\uf128</span>"

        # Select icon based on battery state and charge percentage
        if state == "Discharging":
            icon = get_battery_icon(percentleft)
            fulltext = icon + " "
        elif state == "Full":
            fulltext = FA_PLUG + " "
            timeleft = ""
        elif state == "Unknown":
            icon = get_battery_icon(percentleft)
            fulltext = FA_QUESTION + " " + icon + " "
        elif state == "Charging":
            icon = get_battery_icon(percentleft)
            fulltext = FA_LIGHTNING + " " + icon + " "
        else:
            # Default if state is not recognized
            fulltext = FA_LIGHTNING + " " + FA_PLUG + " "

    # Append percentage text with appropriate color
    text_format = '<span color="{}">{}%</span>'
    percentage_color = get_color(percentleft, config)
    fulltext += text_format.format(percentage_color, percentleft)
    # Optionally, add timeleft information (currently commented out)
    # fulltext += timeleft

    # Print twice (first line for full_text, second for short_text)
    print(fulltext)
    print(fulltext)

    # Exit with code 33 if battery is critically low
    if percentleft < 10:
        exit(33)


if __name__ == "__main__":
    main()
